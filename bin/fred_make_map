#!/usr/local/bin/gnuplot

# default parameters

if (!exists("google")) {
   google = 0
}
if (!exists("api_key")) {
   api_key = "none"
}
if (!exists("my_title")) {
   my_title = "FRED Allegheny County, PA"
}
if (!exists("my_subtitle")) {
   my_subtitle = " "
}
if (!exists("day")) {
   day = 1
}
if (!exists("terminal")) {
  terminal = "png"
}
if (!exists("mapname")) {
  mapname = "map" . terminal
}
if (!exists("show_all_households")) {
  show_all_households = 0
}
if (!exists("show_incidence")) {
  show_incidence = 1
}
if (!exists("show_infectious")) {
  show_infectious = 1
}
if (!exists("show_recovered")) {
  show_recovered = 1
}
if (!exists("filled")) {
  filled = 0
}
if (!exists("linewidth")) {
  linewidth = 1.0
}
if (!exists("max")) {
  max = 10
}
print sprintf("max = %f", max);

if (!exists("force_xmin")) {
  force_xmin = 0
}
if (!exists("force_xmax")) {
  force_xmax = 0
}
if (!exists("force_ymin")) {
  force_ymin = 0
}
if (!exists("force_ymax")) {
  force_ymax = 0
}

if (!exists("household_locations")) {
  household_locations = "households.txt"
}
if (!exists("household_incidence")) {
  household_incidence = "household_incidence.txt"
}
if (!exists("infectious_households")) {
  infectious_households = "infectious_households.txt"
}
if (!exists("recovered_households")) {
  recovered_households = "recovered_households.txt"
}
if (!exists("fipsfile")) {
  fipsfile = "FIPS"
}
if (!exists("rawfile")) {
  valuefile = "RAW"
}
if (!exists("pctfile")) {
  valuefile = "PCT"
}
if (!exists("use_shapefile")) {
  use_shapefile = 1
}
if (!exists("shapefile_dir")) {
  shapefile_dir = "SHAPES"
}
# print "shapefile_dir = " . shapefile_dir . " fipsfile = " . fipsfile
if (!exists("show_grid")) {
   show_grid = 0
}
if (!exists("show_border")) {
   show_border = 0
}

set palette maxcolors 10
set palette defined ( 0 "blue", 1 "skyblue", 2 "sea-green", 3 "green", 4 "greenyellow", 5 "yellow", 6 "orange", 7 "orange-red", 8 "red", 9 "red")

set style line 1 lc rgb "blue" lt 1 lw 0.2
set style line 2 lc rgb "skyblue" lt 1 lw 0.2
set style line 3 lc rgb "sea-green" lt 1 lw 0.2
set style line 4 lc rgb "green" lt 1 lw 0.2
set style line 5 lc rgb "greenyellow" lt 1 lw 0.2
set style line 6 lc rgb "yellow" lt 1 lw 0.2
set style line 7 lc rgb "orange" lt 1 lw 0.2
set style line 8 lc rgb "orange-red" lt 1 lw 0.2
set style line 9 lc rgb "red" lt 1 lw 0.2
set style line 10 lc rgb "red" lt 1 lw 0.2
set style line 11 lc rgb "red" lt 1 lw 0.2
set style line 12 lc rgb "beige" lt 1 lw 0.2
set style line 13 lc rgb "cornsilk" lt 1 lw 0.2
set style line 14 lc rgb "dodgerblue" lt 1 lw 0.2
set style line 15 lc rgb "darkgreen" lt 1 lw 0.2

set style line 999 lc rgb 'white' lt 1 lw 1
set style line 99 lc rgb 'gray' lt 1 lw 1
set style line 98 lc rgb 'gray10' lt 1 lw 1
set style line 100 lc rgb 'black' lt 1 lw 1

unset key; unset tics;

# read in a list of FIPS codes
fips = system("cat " . fipsfile)
# print "fips = " . fips

# associate a county with each FIPS code
county(n) = word(fips,n)

# name of the file containing boundaries for county
filename(n) = sprintf("%s/%s.txt", shapefile_dir, county(n))

values = ""
if (filled) {
  cmd = "cat " . pctfile
  # print cmd
  values = system(cmd)
}
# print values

# get the line style associate with a FIPS code
get_raw(n) =  1 + int(10.0*word(values,n)/max)
get_ls(n) = (get_raw(n) <= 10) ? get_raw(n) : 10

set colorbox
whole_max = sprintf("%.2f", max)
half_max = sprintf("%.2f", max / 2.0)
no_max = "0.00"
# print "whole_max = " . whole_max . "  half_max = " . half_max
set cbtics axis nomirror out scale 0.5 (no_max . "%%" -10, half_max."%%" 0, whole_max."%%" 10) font "arial,10"

# read RANGES.plt file if it exists
ranges = system("perl -e 'if(-e \"RANGES.plt\"){print \"1\"}else{print \"0\"}' ")
print "ranges = " . ranges
if (ranges) {
 # read in previously cmputed values for xmin, xmax, ymin and ymax
 load 'RANGES.plt'
}
else {

 # create a fake plot in order to gather the x and y ranges
 set term unknown
 plot for [n=1:words(fips)] filename(n) u ($2):($1) ls 99 w filledcurve notitle
 
 # initialize the new x and y boundaries
 xmin = GPVAL_DATA_X_MIN
 xmax = GPVAL_DATA_X_MAX
 ymin = GPVAL_DATA_Y_MIN
 ymax = GPVAL_DATA_Y_MAX
 # print xmin, xmax, ymin, ymax
 
 # find the x and y ranges in the data
 xrng = xmax - xmin
 yrng = ymax - ymin
 
 # add some space on each side
 xmin = xmin - 0.075*xrng
 xmax = xmax + 0.075*xrng
 ymin = ymin - 0.025*yrng
 ymax = ymax + 0.025*yrng
 print xmin, xmax, ymin, ymax
 
 if (force_xmin) { xmin = force_xmin }
 if (force_xmax) { xmax = force_xmax }
 if (force_ymin) { ymin = force_ymin }
 if (force_ymax) { ymax = force_ymax }
 # print xmin, xmax, ymin, ymax

 # earth geometry
 km_per_deg_lat = 111.325
 mean_lat = (ymax + ymin) / 2.0
 km_per_deg_lon = cos(mean_lat * pi / 180.0) * km_per_deg_lat
 lat_lon_ratio = km_per_deg_lon / km_per_deg_lat
 
 # print sprintf("mean latitude = %0.5f", mean_lat)
 # print sprintf("km_per_deg_lat = %0.5f", km_per_deg_lat)
 # print sprintf("km_per_deg_lon = %0.5f", km_per_deg_lon)
 # print sprintf("lat_lon_ratio = %0.5f", lat_lon_ratio)
 
 # find the x and y ranges
 xrng = xmax - xmin
 yrng = ymax - ymin
 
 # adjust the x range if too small
 xtarg = yrng / lat_lon_ratio
 xxtra = (xrng < xtarg)? (xtarg - xrng)*0.5 : 0
 xmin = xmin - xxtra
 xmax = xmax + xxtra
 
 # adjust the y range if too small
 ytarg = lat_lon_ratio * xrng
 yxtra = (yrng < ytarg)? (ytarg - yrng)*0.5 : 0
 ymin = ymin - yxtra
 ymax = ymax + yxtra
 # print xmin, xmax, ymin, ymax
 
 # find the x and y ranges
 xrng = xmax - xmin
 yrng = ymax - ymin
 
 # adjust the x range if too small
 xtarg = yrng / lat_lon_ratio
 xxtra = (xrng < xtarg)? (xtarg - xrng)*0.5 : 0
 xmin = xmin - xxtra
 xmax = xmax + xxtra
 
 # adjust the y range if too small
 ytarg = lat_lon_ratio * xrng
 yxtra = (yrng < ytarg)? (ytarg - yrng)*0.5 : 0
 ymin = ymin - yxtra
 ymax = ymax + yxtra
 # print xmin, xmax, ymin, ymax
 
 # save the ranges to a file
 print "writing ranges to  RANGES.plt"
 print xmin, xmax, ymin, ymax
 set print "RANGES.plt"
 print sprintf("ymin = %f",ymin)
 print sprintf("xmin = %f",xmin)
 print sprintf("ymax = %f",ymax)
 print sprintf("xmax = %f",xmax)

 if (google) {
  cmd = sprintf("fred_get_googlemap %f %f %f %f googlemap.png %s", ymin, xmin, ymax, xmax, api_key)
  system(cmd)
 }

}

# ready for the actual plot:

if (filled) {
#  set term pdf enhanced font "Helvetica, 12" size 6.8,4.5
   set term pngcairo enhanced font "arial,12" size 720,480
}
else {
#  set term pdf enhanced font "Helvetica, 12" size 6,4.5
   set term pngcairo enhanced font "arial,12" size 640,640
}

# set the ranges for the axes
set xrange [ xmin:xmax ]
set yrange [ ymin:ymax ]

# get the center of the map
xcenter = (xmin+xmax)/2.0
ycenter = (ymin+ymax)/2.0
xsize = xmax-xmin
ysize = ymax-ymin

# set plot margins
set lmargin 0
set rmargin 0
set tmargin 6
set bmargin 2

unset xlabel
unset ylabel
unset xtics
unset ytics
unset grid
unset border

if (show_border) {
   set xlabel "Longitude\n" offset 0,0
   set ylabel "\nLatitude" offset 1.5,0
   set xtics font "arial,10"
   set ytics font "arial,10"
   if (show_grid) {
    set grid back
   }
   else {
    unset grid
   }
}

# set the title
title_string = sprintf("%s\n%s\nDay %d\n", my_title, my_subtitle, day)
# day_string = sprintf("Day %d", day)
set title title_string offset 0,0 font "Arial, 16"

set label "Red Dot = Infectious Case" at graph 0.1, character 1 left tc ls 9
set label "Blue Dot = Recovered Case" at graph 0.9, character 1 right tc ls 1

set output mapname

set multiplot
if (filled) {
  plot for [n=1:words(fips)] filename(n) u 2:1 t '' ls get_ls(n) w filledcurve, \
       '' u 1:2:3 t '' w p palette ps 0 pt 5
  replot for [n=1:words(fips)] filename(n) u 2:1 t '' w li ls 99 lw 0.5
}
else {
  if(!google) {
   plot for [n=1:words(fips)] filename(n) u 2:1 t '' ls 12 w filledcurve
  }
}

if (show_all_households) {
 replot household_locations u 2:1 t '' wi po ls 99 pt 5 ps 0.1
}
if (show_recovered) {
 if (google) {
   plot 'googlemap.png' binary filetype=png center=(xcenter,ycenter) dx=xsize/640 dy=ysize/498 with rgbimage notitle, recovered_households u 2:1 t '' wi po ls 1 pt 5 ps 0.4
 }
 else {
   replot recovered_households u 2:1 t '' wi po ls 1 pt 5 ps 0.7
 }
}
if (show_infectious) {
 replot infectious_households u 2:1 t '' wi po ls 9 pt 5 ps 0.7
}
if (show_incidence) {
 replot household_incidence u 2:1 t '' wi po ls 15 pt 5 ps 0.7
}

if (!filled) {
 if (use_shapefile) {
  # draw outlines
  replot for [n=1:words(fips)] filename(n) u 2:1 t '' w l lt -1 lw linewidth
 }
}

unset multiplot
# system("open " . outfile)
exit
