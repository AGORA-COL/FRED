#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);

my $census_tracts = 0;
my $country = "usa";
my $disease_id = 0;
my $display = 0;
my $filled = 1;
my $help = 0;
my $grid = 1;
my $key = "";
my $max = 10;
my $parallelism = 1;
my $run = 1;
my $term = "png";
my $title = "FRED Allegheny County";
my $subtitle = " ";
my $show_dots = 0;
my $show_all_households = 0;
my $show_incidence = 0;
my $show_infectious = 0;
my $show_recovered = 0;
my $movie_format = "mp4";
my $linewidth = 1;
my $xmin = "-99999";
my $xmax = "-99999";
my $ymin = "-99999";
my $ymax = "-99999";
my $border = 1;
my $start = 0;
my $interval = 1;

my $opt_result = GetOptions(
			    "border=i" => \$border,
			    "start=i" => \$start,
			    "interval=i" => \$interval,
			    "census_tracts" => \$census_tracts,
			    "country=s" => \$country,
			    "disease=i" => \$disease_id,
			    "display=i" => \$display,
			    "filled=i" => \$filled,
			    "grid=i" => \$grid,
			    "h" => \$help,
			    "help" => \$help,
			    "k=s" => \$key,
			    "key=s" => \$key,
			    "max=s" => \$max,
			    "parallelism=i" => \$parallelism,
			    "run=i" => \$run,
			    "term=s" => \$term,
			    "title=s" => \$title,
			    "subtitle=s" => \$subtitle,
			    "dots=i" => \$show_dots,
			    "households=i" => \$show_all_households,
			    "incidence=i" => \$show_incidence,
			    "infectious=i" => \$show_infectious,
			    "recovered=i" => \$show_recovered,
			    "movieformat=s" => \$movie_format,
			    "lw=f" => \$linewidth,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			   );

my $usage = <<EOH;
usage: $0 [ options ], where options include:
  --movie_format <str> : use the specified movie format.
  --census_tracts 0/1: plot census tracts
  --country <name> : plot the named country
  --disease <id> : plot results for the disease id
  --filled <0/1>:  if set, plot filled curves
  --grid <0/1>: if set, show grid. (default = 1)
  --help: print this help message
  --key <id> : plot the job with given id 
  --max <val> : use the given value as the maximum for color plots
  --parallelism <n> : plot n maps in parallel
  --run <n> : plot results of run n
  --term <type> : plot using the specified terminal type
  --title <str> : title for each map
  --subtitle <str> : subtitle for each map
  --dots <0/1> : if set plot dots
  --incidence <0/1> : if set and dots is set, plot households with incidence
  --infectious <0/1> : if set and dots is set, plot households with infectious members
  --recovered <0/1> :  if set and dots is set, plot households with recovered members
  -x <xmin> : min value for x axis
  -X <xmax> : max value for x axis
  -y <ymin> : min value for y axis
  -Y <xmax> : max value for x axis
EOH

die $usage if $help;
die $usage if not $key;

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $cwd = `pwd`;
chomp $cwd;

my $bindir = "$FRED/bin";
my $id = `$bindir/fred_id $key`;
chomp $id;
die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";

my $outdir = "$FREDRESULTS/JOB/$id/DATA/OUT";
chdir $outdir;

my $command = "fred_make_maps --census_tracts $census_tracts --country $country --disease $disease_id --filled $filled --key $key --max $max --parallelism $parallelism --run $run --term $term --title '$title' --subtitle '$subtitle' --dots $show_dots --households $show_all_households --incidence $show_incidence --infectious $show_infectious --recovered $show_recovered --lw $linewidth -x $xmin -X $xmax -y $ymin -Y $ymax --grid $grid --border $border --start $start --interval $interval";

# print "$command\n"; exit;

system $command;
chdir "VIS/run$run/dis$disease_id/MAPS";
# system "pwd";
# system "ls -l map*";
# exit;
if (-s "FIPS") {
  # system "rm -f $cwd/$key.$movie_format";
  # system "ffmpeg -r 5 -i map\%04d.png -c:v libx264 -r 30 -pix_fmt yuv420p movie.$movie_format -y -loglevel quiet";
  # print "ffmpeg -r 3 -i map\%04d.png -c:v libx264 -r 30 -pix_fmt yuv420p movie.$movie_format -y -loglevel quiet\n";
  system "ffmpeg -r 3 -i map\%04d.png -c:v libx264 -r 30 -pix_fmt yuv420p movie.$movie_format -y -loglevel quiet";
  # print "cp movie.$movie_format $cwd/$key.$movie_format\n";
  system "cp movie.$movie_format $cwd/$key.$movie_format";
  chdir $cwd;
  # system "ls -l $key.$movie_format";
  system "open $key.$movie_format" if $display;
}
else {
  die "$0: map data not found\n";
}

