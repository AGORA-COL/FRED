#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $help = "";
my $key = "";
my $var = "";
my $run = -1;
my $dir = "";
my $weekly = "";
my $opt_result = GetOptions(
			    "help" => \$help,
			    "h" => \$help,
			    "k=s" => \$key,
			    "key=s" => \$key,
			    "var=s" => \$var,
			    "v=s" => \$var,
			    "run=i" => \$run,
			    "r=i" => \$run,
			    "n=i" => \$run,
			    "d=s" => \$dir,
			    "weekly" => \$weekly,
			    "w" => \$weekly,
);

my $usage = <<EOH;
usage: $0 --help | -k key [-v variable ][-n run_number]
    -k or --key   the key for a FRED job (no default)
    -v or --var   if set, the variable to be reported. default: report all variables.
    -n or --run   if set, report a specific run number. default: report mean and std over all runs.
EOH

die $usage if $help;

if ($dir eq "") {
  die $usage if not $key;
  my $id = `fred_id $key`;
  chomp $id;
  die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";
  $dir = "$FREDRESULTS/JOB/$id/DATA/TABLES";
  if (not -e "$dir/VARS" or not -e "$dir/Weekly-1.txt") {
    system "fred_post_process $FREDRESULTS/JOB/$id/DATA/OUT $FREDRESULTS/JOB/$id/DATA/TABLES $FREDRESULTS/JOB/$id/DATA/REPORTS";
  }
}

my @vars = ();
if ($var ne "") {
  push @vars, $var;
}
else {
  open FH,"$dir/VARS" or die "$0: ERROR OPENING $dir/VARS\n";
  while (<FH>) {
    chomp;
    push @vars, $_;
  }
  close FH;
}

my @line = ();
my $datafile;

if ($weekly) {

  $weekly = "Weekly_";

  # Add Week column
  $datafile = "$dir/Weekly-1.txt";
  die "$0: ERROR FINDING Pop file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  my $i = 0;
  while (<FH>) {
    chomp; 
    $line[$i++] = "$_";
  }

  # Add Pop column
  $datafile = "$dir/Weekly_N.txt";
  $datafile = "$dir/Weekly_N-$run.txt" if $run > 0;
  die "$0: ERROR FINDING Pop file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  $i = 0;
  while (<FH>) {
    chomp; 
    if ($run > 0) {
      if ($i == 0) {
	$line[$i++] .= " Run N";
      }
      else {
	$line[$i++] .= " $run $_";
      }
    }
    else {
      my ($mean,$std,$runs) = split " ", $_;
      if ($i > 0) {
	$mean = cleanup($mean);
	$std = cleanup($std);
      }
      $line[$i++] .= " $runs $mean $std";
    }
  }

}
else {

  # Add Day column
  $datafile = "$dir/Day.txt";
  die "$0: ERROR FINDING Day file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  my $i = 0;
  while (<FH>) {
    chomp; 
    $line[$i++] = $_;
  }
  
  # Add WkDay column
  $datafile = "$dir/WkDay.txt";
  die "$0: ERROR FINDING Pop file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  $i = 0;
  while (<FH>) {
    chomp; 
    $line[$i++] .= " $_";
  }

  # Add Date column
  $datafile = "$dir/Date.txt";
  die "$0: ERROR FINDING Pop file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  $i = 0;
  while (<FH>) {
    chomp; 
    $line[$i++] .= " $_";
  }

  # Add Week column
  $datafile = "$dir/Week.txt";
  die "$0: ERROR FINDING Pop file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  $i = 0;
  while (<FH>) {
    chomp; 
    $line[$i++] .= " $_";
  }

  # Add Year column
  $datafile = "$dir/Year.txt";
  die "$0: ERROR FINDING Pop file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  $i = 0;
  while (<FH>) {
    chomp; 
    $line[$i++] .= " $_";
  }

# Add Pop column
  $datafile = "$dir/N.txt";
  $datafile = "$dir/N-$run.txt" if $run > 0;
  die "$0: ERROR FINDING Pop file $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  $i = 0;
  while (<FH>) {
    chomp; 
    if ($run > 0) {
      if ($i == 0) {
	$line[$i++] .= " Run N";
      } else {
	$line[$i++] .= " $run $_";
      }
    } else {
      my ($mean,$std,$runs) = split " ", $_;
      if ($i > 0) {
	$mean = cleanup($mean);
	$std = cleanup($std);
      }
      $line[$i++] .= " $runs $mean $std";
    }
  }

}

for my $v (@vars) {
  next if $v eq "Day" or $v eq "Date" or $v eq "Week" or $v eq "Year" or $v eq "WkDay" or $v eq "N";
  # print "v = |$v|\n";
  if ($run > 0) {
    $datafile = "$dir/$weekly$v-$run.txt";
    $datafile = "$dir/$weekly$v\_0-$run.txt" if not -e $datafile;
  }
  else {
    $datafile = "$dir/$weekly$v.txt";
    $datafile = "$dir/$weekly$v\_0.txt" if not -e $datafile;
  }

  # Add data column
  die "$0: ERROR FINDING $datafile\n" if not -e $datafile;
  open FH, $datafile or die "$0: ERROR READING $datafile\n";
  my $i = 0;
  while (my $in = <FH>) {
    chomp $in; 
    if ($run > 0) {
      $line[$i++] .= " $in";
    }
    else {
      my ($mean, $std) = split " ", $in;
      if ($i > 0) {
	$mean = cleanup($mean);
	$std = cleanup($std);
      }
      $line[$i++] .= " $mean $std";
    }
  }
}
  
# replace spaces with commas
for (my $i = 0; $i < scalar @line; $i++) {
  $line[$i] =~ s/ /,/g;
}

# print lines
print "$_\n" for @line;
exit;


sub cleanup {
  my $x1 = shift;
  my $x = sprintf("%0.5f", $x1);
  $x =~ s/0*$//;
  $x =~ s/\.$//;
  return $x;
}
