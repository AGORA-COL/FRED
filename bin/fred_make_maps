#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);

my $api_key = "none";
my $census_tracts = 0;
my $country = "usa";
my $disease_id = 0;
my $filled = 0;
my $help = 0;
my $key = "";
my $max = 10;
my $parallelism = 10;
my $run = 1;
my $term = "png";
my $title = "FRED Allegheny County";
my $subtitle = " ";
my $show_all_households = 0;
my $show_incidence = 0;
my $show_infectious = 1;
my $show_recovered = 1;
my $linewidth = 2;
my $xmin = 0;
my $xmax = 0;
my $ymin = 0;
my $ymax = 0;
my $grid = 0;
my $border = 0;
my $start = 0;
my $interval = 1;
my $google = 1;
my $use_shapefile = 1;

my $opt_result = GetOptions(
			    "api_key=s" => \$api_key,
			    "border=i" => \$border,
			    "start=i" => \$start,
			    "interval=i" => \$interval,
			    "census_tracts=i" => \$census_tracts,
			    "country=s" => \$country,
			    "disease=i" => \$disease_id,
			    "filled=i" => \$filled,
			    "h" => \$help,
			    "help" => \$help,
			    "google=i" => \$google,
			    "grid=i" => \$grid,
			    "g=i" => \$grid,
			    "key=s" => \$key,
			    "max=s" => \$max,
			    "parallelism=i" => \$parallelism,
			    "run=i" => \$run,
			    "term=s" => \$term,
			    "title=s" => \$title,
			    "subtitle=s" => \$subtitle,
			    "households=i" => \$show_all_households,
			    "incidence=i" => \$show_incidence,
			    "infectious=i" => \$show_infectious,
			    "recovered=i" => \$show_recovered,
			    "shapefile=i" => \$use_shapefile,
			    "lw=f" => \$linewidth,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			   );

my $usage = <<EOH;
usage: $0 [ options ], where options include:
  --api_key <key>: if set, use this api_key to obtain Google maps ["none"]
  --border 0/1: if set, display border around map with lat-lon labels [0]
  --census_tracts 0/1: plot census tracts [0]
  --country <name> : plot the named country [usa]
  --disease <id> : plot results for the disease id [0]
  --display <0/1> : if set, play the movie after it is made [0]
  --filled <0/1>:  if set, plot filled curves [0]
  --google : if set, use a google map as a background image [1]
  --grid <0/1>: if set, show grid. [0]
  --help: print this help message
  --households <0/1> : plot all households [0]
  --incidence <0/1> : if set and dots is set, plot households with incidence [0]
  --infectious <0/1> : if set and dots is set, plot households with infectious members [1]
  --interval <n> : movie include every nth day [1] 
  --key <id> : plot the job with given id [none - must be specified]
  --lw <n> : use linewidth n to outline counties [2]
  --max <val> : use the given value as the maximum for color plots [10]
  --movie_format <str> : use the specified movie format [mp4]
  --parallelism <n> : plot n maps in parallel [10]
  --recovered <0/1> :  if set and dots is set, plot households with recovered members [1]
  --run <n> : plot results of run n [1]
  --shapefile <0/1> : if set, draw the shapefile for each fips code
  --start day: start movie on specified day [0]
  --subtitle <str> : subtitle for each map [" "]
  --term <type> : plot using the specified terminal type [png]
  --title <str> : title for each map ["FRED Allegheny County"]
  -x <xmin> : min value for x axis 
  -X <xmax> : max value for x axis 
  -y <ymin> : min value for y axis
  -Y <xmax> : max value for x axis
EOH

die $usage if $help;
die $usage if not $key;

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $bindir = "$FRED/bin";
my $id = `$bindir/fred_id $key`;
chomp $id;
die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";

my $outdir = "$FREDRESULTS/JOB/$id/DATA/OUT";
chdir $outdir or die "Can't chdir to $outdir\n";
# print "CWD = $outdir\n";
my $days = `wc -l out1.txt`;
chomp $days;
$days--;
$parallelism = $days if ($days < $parallelism);
# print "days = $days\n";

my $vis = "$outdir/VIS/run$run/dis$disease_id";
chdir $vis or die "Can't chdir to $vis\n";
# print "CWD = $vis\n";

if (not -d "MAPS") {
  system "mkdir -p MAPS";
  die "Can't mkdir MAPS\n" if not -d "MAPS";
} 
else {
  # print "MAPS already exists\n";
}

# get the population for each fips code
my @fips = ();
my %pop = ();
my $fipspopfile ="$FRED/input_files/countries/$country/fips_pop.txt";
open IN,$fipspopfile or die "ERROR: no file $fipspopfile\n";
while (<IN>) {
  chomp;
  my ($fips,$n) = split " ";
  $pop{$fips} = $n;
  # print "pop of $fips = $pop{$fips}\n";
}
close IN;

my $shapefiledir ="$FRED/input_files/countries/$country/SHAPES";
my $max_pct = 0.0;
if ($country eq "usa" and $census_tracts eq 1) {
  make_census_tract_map_data();
  $shapefiledir = "$vis/MAPS/SHAPES";
}
else {
  make_county_map_data($run);
}
# print "max_pct = $max_pct\n";
chdir "MAPS";
system "rm -f RANGES.plt google_map.png map* load* fred_make_maps.log";

my $shapedir = "$FRED/SHAPEFILES/2010";
my $shapefile = "x";
if ($country eq "usa" and $census_tracts eq 1) {
  if (not -d "SHAPES") {
    # get county
    open FH, "FIPS";
    my $county = <FH>;
    close FH;
    $county = substr($county,0,5);
    $shapefile = "tl_2010_$county\_tract10";
    system "unzip $shapedir/$shapefile >> fred_make_maps.log ";
    system "mkdir -p SHAPES";
    system "$bindir/fred_read_shapefile $shapefile SHAPES >> fred_make_maps.log";
  }
}

print "making maps ";
my $started = 0;
my @cmds = ();
my @wait = ();
my $index = 0;
for (my $day = $start; $day <= $days; $day += $interval) {
  my $mapname = sprintf("map%04d.$term",$index);
  push @wait, $mapname;
  $index++;
  # print "make_map $mapname\n";
  my $loadfile = "load-run=$run-dis=$disease_id-day=$day.plt";
  open LD, ">$loadfile";
  print LD "my_title = \"$title\"\n";
  print LD "my_subtitle = \"$subtitle\"\n";
  print LD "day = $day\n";
  print LD "google = $google\n";
  print LD "terminal = '$term'\n";
  print LD "mapname = '$mapname'\n";
  print LD "show_all_households = $show_all_households\n";
  print LD "show_incidence = $show_incidence\n";
  print LD "show_infectious = $show_infectious\n";
  print LD "show_recovered = $show_recovered\n";
  print LD "filled = $filled\n";
  print LD "max = $max\n";
  print LD "household_locations = '$vis/households.txt'\n";
  print LD "household_incidence = '$vis/C/households-$day.txt'\n";
  print LD "infectious_households = '$vis/I/households-$day.txt'\n";
  print LD "recovered_households = '$vis/R/households-$day.txt'\n";
  print LD "fipsfile = '$vis/MAPS/FIPS'\n";
  print LD "rawfile = '$vis/MAPS/RAW-$disease_id.$day'\n";
  print LD "pctfile = '$vis/MAPS/PCT-$disease_id.$day'\n";
  print LD "use_shapefile = $use_shapefile\n";
  print LD "shapefile_dir = '$shapefiledir'\n";
  print LD "linewidth = $linewidth\n";
  print LD "force_xmin = $xmin\n";
  print LD "force_xmax = $xmax\n";
  print LD "force_ymin = $ymin\n";
  print LD "force_ymax = $ymax\n";
  print LD "show_grid = $grid\n";
  print LD "show_border = $border\n";
  print LD "api_key = '$api_key'\n";
  close LD;

  my $cmd = "gnuplot -e \'load \"$loadfile\" \' $bindir/fred_make_map 2\>\> fred_make_maps.log"; 
  system "echo ================================ >> fred_make_maps.log; echo $cmd >> fred_make_maps.log";
  system("($cmd; touch .done.$day)&");
  # print "$mapname\n";
  print ".";
  $started++;
  if (($day eq $start) or ($started eq $parallelism)) {
    for my $file (@wait) {
      while (not -s $file) { sleep 1; }
    }
    $started = 0;
  }
}
for my $file (@wait) {
  while (not -s $file) { sleep 1; }
}
# system "ls -l map*";
# system "rm -rf PCT* RAW* SHAPES load* .done* $shapefile.*";
print " done\n";
exit;


##################################################

sub make_county_map_data {
  my $run = shift;
  my $filename = "$outdir/out$run.txt";
  die "$0: outfile $filename not found\n" if not -e "$filename";

  @fips = ();
  open FH, $filename or die "ERROR: $0 can't open file $filename\n";
  while (<FH>) {
    chomp;
    my @a = split " ";
    my $day = $a[1];
    my @values_0 = ();
    my @values_1 = ();
    my @values_2 = ();
    my @values_3 = ();
    while (@a) {
      my $key = shift @a;
      my $val = shift @a;
      if ($key =~ /^County_/) {
	# print "key = |$key|\n";
	my ($code) = $key =~ /^County_(\d+)/;
	# my ($code, $dis) = $key =~ /^County_(\d+)_(\d+)/;
	my $dis = 0;
	push @fips, $code if ($dis == 0 and $day == 0);
	push @values_0, $val if $dis == 0;
	push @values_1, $val if $dis == 1;
	push @values_2, $val if $dis == 2;
	push @values_3, $val if $dis == 3;
      }
    }
    exit if not @fips;
    if ($day == 0) {
      my $outfile = "MAPS/FIPS";
      open OUT,">$outfile";
      for my $i (0..$#fips) {
	my $f = sprintf("%05d", $fips[$i]);
	print OUT "$f\n" for @fips;
      }
      close OUT;
    }
    write_values_to_file(0,$day, @values_0);
    write_values_to_file(1,$day, @values_1);
    write_values_to_file(2,$day, @values_2);
    write_values_to_file(3,$day, @values_3);
  }
  close FH;
}

sub write_values_to_file {
  my ($dis,$day, @values) = @_;
  return if not @values;
  my $rawfile = "RAW-$dis.$day";
  my $pctfile = "PCT-$dis.$day";
  open RAW,">MAPS/$rawfile";
  open PCT,">MAPS/$pctfile";
  for my $i (0..$#values) {
    my $f = sprintf("%05d", $fips[$i]);
    die "$0: can't find pop for fips = |$fips[$i]|\n" if not exists $pop{$f};
    die "$0: zero pop for fips = |$fips[$i]|\n" if not $pop{$f};
    my $pct = 100.0 * $values[$i] / $pop{$f};
    $max_pct = $pct if $pct > $max_pct;
    print RAW "$values[$i] $pop{$f}\n";
    print PCT "$pct\n";
  }
  close RAW;
  close PCT;
}

sub make_census_tract_map_data {
  open FIPS,">MAPS/FIPS";
  for my $day (0..$days) {
    my $file = "C/census_tracts-$day.txt";
    die "$0: ERROR file $file not found\n" if not -e $file;
    open CT,$file or die "$0: ERROR reading file $file\n";
    my $rawfile = "RAW-$disease_id.$day";
    my $pctfile = "PCT-$disease_id.$day";
    open RAW,">MAPS/$rawfile";
    open PCT,">MAPS/$pctfile";
    my $line = <CT>; # skip header line
    while ($line = <CT>) {
      chomp $line;
      my ($tract,$count,$pop) = split " ", $line;
      my $format = "\%05d\n";
      my $str = "x$tract";
      $format = "\%011d\n" if length($str) > 6;
      my $pct = 100.0 * $count / $pop;
      $max_pct = $pct if $pct > $max_pct;
      print RAW "$count $pop\n";
      print PCT "$pct\n";
      printf FIPS $format, $tract if $day == 0;
    }
    close CT;
    close RAW;
    close PCT;
  }
  close FIPS;
  return;
}
