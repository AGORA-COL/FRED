#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $gnuplot = $ENV{FRED_GNUPLOT};
die "$0: no gnuplot\n" if (not $gnuplot or (not -x $gnuplot));

my $commandline = "fred_plot @ARGV";
my @data = ();

my %titles = ( AR => "Attack Rate",
	       ARs => "Symptomatic Attack Rate",
	       C => "Incidence",
	       Cs => "Symptomatic Incidence",
	       Cls => "Classroom Transmissions",
	       E => "Exposed",
	       H => "Household Transmissions",
	       I => "Infectious",
	       Is => "Symptomatics",
	       M => "Immune",
	       N => "Pop Size",
	       P => "Prevalence",
	       Off => "Office Transmissions",
	       R => "Recovered",
	       RR => "Reproductive Rate",
	       S => "Susceptible",
	       Sch => "School Transmissions",
	       SM => "Seasonality Mult",
	       Wrk => "Workplace Transmissions",
	       X => "Imported Transmissions",
	       small => "Presenteeism at Small Workplaces",
	       med => "Presenteeism at Medium Workplaces",
	       large => "Presenteeism at Large Workplaces",
	       xlarge => "Presenteeism at Xlarge Workplaces",
);

my @keys = ();
my @varlist = ();
my $year = "0";
my $xmin = "0";
my $xmax = "*";
my $ymin = "0";
my $ymax = "*";
my $errorbars;
my $nameonly;
my $dataonly;
my $with = "lines";
my $title = "FRED Simulation";
my $period = "daily";
my $weekly;
my $ensemble;
my $fontsize = "medium";
my $epi;
my $hist;
my $normalize;
my $scale = 100000;
my $smooth;
my $xtics;
my $legend;
my $xlabel;
my $ylabel;
my $outfile = "";
my $help = "";
my $opt_result = GetOptions(
			    "h" => \$help,
			    "help" => \$help,
			    "e" => \$errorbars,
			    "ensemble" => \$ensemble,
			    "f=s" => \$fontsize,
			    "k=s" => \@keys,
			    "T=s" => \$title,
			    "v=s" => \@varlist,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			    "data" => \$dataonly,
			    "epi" => \$epi,
			    "errorbars" => \$errorbars,
			    "font=s" => \$fontsize,
			    "bar" => \$hist,
			    "histogram" => \$hist,
			    "keys=s" => \@keys,
			    "legend=s" => \$legend,
			    "name" => \$nameonly,
			    "normalize" => \$normalize,
			    "scale=f" => \$scale,
			    "period=s" => \$period,
			    "smooth" => \$smooth,
			    "title=s" => \$title,
			    "var=s" => \@varlist,
			    "weekly" => \$weekly,
			    "with=s" => \$with,
			    "xtics=i" => \$xtics,
			    "xmin=i" => \$xmin,
			    "xmax=i" => \$xmax,
			    "Xmax=i" => \$xmax,
			    "ymin=i" => \$ymin,
			    "ymax=i" => \$ymax,
			    "Ymax=i" => \$ymax,
			    "ylabel=s" => \$ylabel,
			    "xlabel=s" => \$xlabel,
			    "o=s" => \$outfile,
			    "output=s" => \$outfile,
			   );

my $usage = <<EOH;
usage: fred_plot -k key -v var [ options ], where options include:
       -h: print this help message.
       -e: include errorbars on plot.
       -f fontsize: specify font size
       -k key [ -k key ... ]: keys of jobs to plot
       -T title: Title to appear on plot.
       -v var [ -v var ... ]: variable to be plotted.
       -x xmin: min value for x-axis.
       -X xmax: max value for x-axis.
       -y ymin: min value for y-axis.
       -Y ymax: max value for y-axis.
       -o outfile: send output image to indicated file.
       --epi: label weeks by epi week numbers instead of simulation weeks.
       --histogram: plot histograms instead of curves.
       --name: return the name of the plot file only.
       --normalize: scale y-axis to show counts per 100,000 people.
       --weekly: plot variables averaged over epi weeks, with a smooth spline curve.
EOH

die $usage if $help;

# resolve conflicting options

# if attack rates are requested, disable smoothing and weekly sums
for my $v (@varlist) {
 if ($v =~ /AR/) {  
   $smooth = 0;
   $weekly = 0;
   $legend = "top right";
 }
}

# histogram overides smoothing
$smooth = 0 if $hist;

#ensemble overides epi
$epi = 0 if $ensemble;

$period = "weekly" if $weekly or $smooth;
$with = "lines" if not $with;
die $usage if not @keys;
die $usage if not @varlist;

# check keys
my $bindir = "$FRED/bin";
my %id_of_key = ();
my $idstr = "";
for my $key (@keys) {
  my $id = `$bindir/fred_id $key`;
  chomp $id;
  die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";
  $idstr.= "-$id";

  my $status = `$bindir/fred_status -k $key`;
  chomp $status;
  $status =~ s/\s.*//;
  die "$0 bad status: $status\n" if $status ne "FINISHED";
  $id_of_key{$key} = $id;
}

my $varstr = join "-", @varlist;
my $plotstr = "plot-$varstr";

my $pltfile = "$plotstr.plt";
my $pdffile = "$plotstr.pdf";
if (not $outfile) {
  $outfile = $pdffile;
}

for my $v (@varlist) {
  for my $key (@keys) {
    get_data($key, $v, 0);
    if ($ensemble) {
      my $runs = get_runs($key);
      for my $run (1..$runs) {
	get_data($key, $v, $run);
      }
    }
  }
}

my $date = scalar localtime;

open FH, ">$pltfile";
my $terminal = "pdf font 'Helvetica,18' linewidth 3 size 11.75,8.25";
my $setkey = "set key at graph 0.96, graph 0.96 right";

print FH <<"EOF";
#!$gnuplot
#
# file: $pltfile
# created: $date
#
# command line used to generate this file:
# $commandline
#
set terminal $terminal
set title \"$title\"
set output \"$outfile\"
$setkey
set grid
set xrange [$xmin:$xmax]
set yrange [$ymin:$ymax]
set xlabel \"Days\" offset 0,0.5
set ylabel \"Individuals\" offset 1.2,0
set datafile separator ','
EOF

if ($normalize) {
  if ($scale == 1) {
    print FH "set ylabel \"Fraction of Population\" offset 1.2,0\n";
  }
  elsif ($scale == 100) {
    print FH "set ylabel \"Percent\" offset 1.2,0\n";
  }
  else {
    print FH "set ylabel \"Per $scale\" offset 1.2,0\n";
  }
}

if ($xlabel) {
  print FH "set xlabel \"$xlabel\" offset 0,0.5\n";
}

if ($ylabel) {
  print FH "set ylabel \"$ylabel\" offset 1.2,0\n";
}

for my $v (@varlist) {
 if ($v =~ /AR/) {  
   print FH "set ylabel 'Percent Infected' offset 1.2,0\n";
   $ymax = 100 if $ymax eq "*";
   print FH "set yrange [0:$ymax]\n";
 }
}

if ($hist) {
  # print FH "set boxwidth 1.0\n";
  print FH "set style data histogram\n";
  print FH "set style fill solid border\n";
  if ($errorbars) {
    print FH "set style histogram errorbars linewidth 1\n";
    print FH "set style fill solid 0.3\n";
    print FH "set bars front\n";
  }
}

if ($weekly or $epi) {
  print FH "set xlabel \"Week\" offset 0,0\n";

}

print FH "set xtics $xtics\n" if $xtics;
print FH "set key $legend\n" if $legend;

my $n = 0;
for my $v (@varlist) {
  my $titlevar = $v;
  $titlevar = $titles{$v} if exists $titles{$v};
  for my $key (@keys) {
    my $ptitle = "$titlevar";
    $ptitle = "$ptitle-$key" if scalar @keys > 1;
    my $plotcmd = ($n == 0);
    $n++;
    print FH $plotcmd? "plot " : ",\\\n";
    print FH plot_spec($ptitle,$n,0);
    $plotcmd = 0;
    if ($ensemble) {
      my $runs = get_runs($key);
      for my $run (1..$runs) {
	print FH $plotcmd? "plot " : ",\\\n";
	print FH plot_spec("",$n,$run);
      }
    }
  }
}
print FH "\n";
print FH "$_\n" for @data;
print FH "\n";
close FH;
system "chmod +x $pltfile";
system ($pltfile);
if ($nameonly) {
  print "$outfile\n";
}
else {
  system ("open $outfile");
}
exit;

sub get_data {
  my ($key, $var, $run) = @_;
  my $tmpfile = ".tmpfile";
  my $week = "";
  $week = "--weekly" if $weekly;
  if ($run > 0) {
    system "fred_csv -k $key -v $var -r $run $week > $tmpfile";
  }
  else {
    system "fred_csv -k $key -v $var $week > $tmpfile";
  }
  my @tmpdata = ();
  open IN, $tmpfile;
  while (<IN>) {
    chomp;
    push @tmpdata, $_;
  }
  close IN;
  push @tmpdata, "EOF";
  push @data, @tmpdata;
  push @data, @tmpdata if $errorbars and $run == 0;
  unlink $tmpfile;
}

sub plot_spec {
  my ($ptitle,$n,$run) = @_;
  $smooth = 0 if $weekly;

  # x-axis value
  my $x = "(\$1):";
  $x = "" if $hist;

  # y-axis value
  my $y = $weekly ? "\$6" : "\$9";
  if ($run > 0) {
    $y = $weekly ? "\$5" : "\$8";
  }

  # errorbars
  my $e = "";
  if ($errorbars and $run == 0) {
    $e = $weekly? "\$7" : "\$10";
  }

  # divide by pop size to normalize
  if ($normalize) {
    my $mult = $weekly ? "(1.0*$scale/\$4)" : "(1.0*$scale/\$7)";
    $y = "$y*$mult";
    $e = "$e*$mult";
  }

  # xtics
  my $xtic = "";
  $xtic = ":xtic(1)" if $epi;

  # title
  my $title = "title '$ptitle'";
  $title = "notitle" if $run > 0;

  # line width
  my $lw = "lw 5";
  $lw = "lw 0.5" if $run > 0;

  # plot with lines?
  my $w = "with lines";
  # $w = "smooth csplines" if $smooth or $weekly;
  $w = "" if $hist;

  my $spec = "";
  $spec = "'-' using $x($y):($e)$xtic notitle wi errorbars lt -1 $lw, \\\n" if $errorbars and $run == 0;
  $spec .= "'-' using $x($y)$xtic $title $w lt $n $lw";
  return $spec;
}

sub get_runs {
  my $key = shift;
  my $id = $id_of_key{$key};
  my $runs = `cat $FREDRESULTS/JOB/$id/META/RUNS`;
  chomp $runs;
  return $runs;
}
